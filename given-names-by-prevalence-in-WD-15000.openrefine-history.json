[
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "nameLabel",
    "urlExpression": "grel:\"http://localhost/refine-proxy/given_names.php?name=\"+escape(\"\\\"\"+value+\"\\\"@\"+cells[\"nameLang\"].value,\"url\")",
    "onError": "set-to-blank",
    "newColumnName": "wd_gender_results",
    "columnInsertIndex": 1,
    "delay": 500,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.6.2 [579a6f7]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column wd_gender_results at index 1 by fetching URLs based on column nameLabel using expression grel:\"http://localhost/refine-proxy/given_names.php?name=\"+escape(\"\\\"\"+value+\"\\\"@\"+cells[\"nameLang\"].value,\"url\")"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "wd_gender_results",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "|",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column wd_gender_results by separator"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "wd_gender_results 1",
    "newColumnName": "count_male",
    "description": "Rename column wd_gender_results 1 to count_male"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "wd_gender_results 2",
    "newColumnName": "count_female",
    "description": "Rename column wd_gender_results 2 to count_female"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "wd_gender_results 3",
    "newColumnName": "count_other",
    "description": "Rename column wd_gender_results 3 to count_other"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "wd_gender_results 4",
    "newColumnName": "count_undefined",
    "description": "Rename column wd_gender_results 4 to count_undefined"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "nameLabel",
      "nameLang",
      "count",
      "count_male",
      "count_female",
      "count_other",
      "count_undefined"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "count_undefined",
    "expression": "grel:length(cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count\"].value)",
    "onError": "set-to-blank",
    "newColumnName": "nameLabel_count",
    "columnInsertIndex": 7,
    "description": "Create column nameLabel_count at index 7 based on column count_undefined using expression grel:length(cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count\"].value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "nameLabel_count",
          "expression": "value",
          "columnName": "nameLabel_count",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 2,
                "l": "2"
              }
            },
            {
              "v": {
                "v": 3,
                "l": "3"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "count_male",
    "expression": "grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_male\"].value.sort().reverse()[0]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column count_male using expression grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_male\"].value.sort().reverse()[0]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "nameLabel_count",
          "expression": "value",
          "columnName": "nameLabel_count",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 2,
                "l": "2"
              }
            },
            {
              "v": {
                "v": 3,
                "l": "3"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "count_female",
    "expression": "grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_female\"].value.sort().reverse()[0]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column count_female using expression grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_female\"].value.sort().reverse()[0]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "nameLabel_count",
          "expression": "value",
          "columnName": "nameLabel_count",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 2,
                "l": "2"
              }
            },
            {
              "v": {
                "v": 3,
                "l": "3"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "count_other",
    "expression": "grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_other\"].value.sort().reverse()[0]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column count_other using expression grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_other\"].value.sort().reverse()[0]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "nameLabel_count",
          "expression": "value",
          "columnName": "nameLabel_count",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 2,
                "l": "2"
              }
            },
            {
              "v": {
                "v": 3,
                "l": "3"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "count_undefined",
    "expression": "grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_undefined\"].value.sort().reverse()[0]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column count_undefined using expression grel:cells[\"nameLabel\"].cross(\"\",\"nameLabel\").cells[\"count_undefined\"].value.sort().reverse()[0]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "nameLabel_count",
    "expression": "grel:\"x\"",
    "onError": "set-to-blank",
    "newColumnName": "dummy",
    "columnInsertIndex": 8,
    "description": "Create column dummy at index 8 based on column nameLabel_count using expression grel:\"x\""
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "dummy",
    "expression": "grel:round(sum(cell.cross(\"\",\"dummy\").cells[\"count_male\"].value)*1.0/sum(cell.cross(\"\",\"dummy\").cells[\"count_female\"].value)*10000)/10000.0",
    "onError": "set-to-blank",
    "newColumnName": "normalization_factor",
    "columnInsertIndex": 9,
    "description": "Create column normalization_factor at index 9 based on column dummy using expression grel:round(sum(cell.cross(\"\",\"dummy\").cells[\"count_male\"].value)*1.0/sum(cell.cross(\"\",\"dummy\").cells[\"count_female\"].value)*10000)/10000.0"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "count_undefined",
    "expression": "grel:if(cells[\"count_male\"].value > cells[\"count_female\"].value*cells[\"normalization_factor\"].value + cells[\"count_other\"].value, 'male', if(cells[\"count_female\"].value *cells[\"normalization_factor\"].value > cells[\"count_male\"].value + cells[\"count_other\"].value, 'female', 'inconclusive'))",
    "onError": "set-to-blank",
    "newColumnName": "prevalent_gender",
    "columnInsertIndex": 7,
    "description": "Create column prevalent_gender at index 7 based on column count_undefined using expression grel:if(cells[\"count_male\"].value > cells[\"count_female\"].value*cells[\"normalization_factor\"].value + cells[\"count_other\"].value, 'male', if(cells[\"count_female\"].value *cells[\"normalization_factor\"].value > cells[\"count_male\"].value + cells[\"count_other\"].value, 'female', 'inconclusive'))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "prevalent_gender",
          "expression": "value",
          "columnName": "prevalent_gender",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "male",
                "l": "male"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "prevalent_gender",
    "expression": "grel:round(cells[\"count_male\"].value*1.0/(cells[\"count_male\"].value + cells[\"count_female\"].value*cells[\"normalization_factor\"].value + cells[\"count_other\"].value)*100000)/100000.0",
    "onError": "set-to-blank",
    "newColumnName": "confidence",
    "columnInsertIndex": 8,
    "description": "Create column confidence at index 8 based on column prevalent_gender using expression grel:round(cells[\"count_male\"].value*1.0/(cells[\"count_male\"].value + cells[\"count_female\"].value*cells[\"normalization_factor\"].value + cells[\"count_other\"].value)*100000)/100000.0"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "prevalent_gender",
          "expression": "value",
          "columnName": "prevalent_gender",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "female",
                "l": "female"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "confidence",
    "expression": "grel:round(cells[\"count_female\"].value*cells[\"normalization_factor\"].value/(cells[\"count_male\"].value + cells[\"count_female\"].value*cells[\"normalization_factor\"].value + cells[\"count_other\"].value)*100000)/100000.0",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column confidence using expression grel:round(cells[\"count_female\"].value*cells[\"normalization_factor\"].value/(cells[\"count_male\"].value + cells[\"count_female\"].value*cells[\"normalization_factor\"].value + cells[\"count_other\"].value)*100000)/100000.0"
  }
]